import torch.nn.functional as F
import torch
import torch.nn as nn


def build_attention(attention_type, hidden_dim):
    if attention_type == 'None':
        return MLPAttention(hidden_dim)
    elif attention_type == 'MLP':
        return MLPAttention(hidden_dim)
    elif attention_type == 'General':
        return GeneralAttention(hidden_dim)
    elif attention_type == 'Dot':
        return DotAttention(hidden_dim)
    elif attention_type == 'Concat':
        return ConcatAttention(hidden_dim)

    exit()


class Attention(nn.Module):
    def __init__(self,
                 dim,
                 attention_type):
        self.linear_out = nn.Linear(dim * 2, dim)

    def forward(self, decoder_hidden, memory_bank, memory_mask=None):
        if decoder_hidden.dim() == 2:
            one_step = True
            decoder_hidden = decoder_hidden.unsqueeze(1)
        else:
            one_step = False

        batch, source_l, dim = memory_bank.size()
        batch_, target_l, dim_ = decoder_hidden.size()

        align = self.score(decoder_hidden, memory_bank)

        if memory_mask is not None:
            memory_mask = memory_mask.unsqueeze(1)  # Make it broadcastable.
            align.masked_fill_(memory_mask == 0, -float('inf'))

        align_vectors = F.softmax(align.view(batch*target_l, source_l), -1)
        align_vectors = align_vectors.view(batch, target_l, source_l)

        context_vector = torch.bmm(align_vectors, memory_bank)

        concat_c = torch.cat(
            [context_vector, decoder_hidden], 2).view(batch*target_l, dim*2)
        attn_h = self.linear_out(concat_c).view(batch, target_l, dim)
        attn_h = torch.tanh(attn_h)

        if one_step:
            attn_h = attn_h.squeeze(1)
            align_vectors = align_vectors.squeeze(1)
        else:
            attn_h = attn_h.transpose(0, 1).contiguous()
            align_vectors = align_vectors.transpose(0, 1).contiguous()

        return attn_h, align_vectors


class MLPAttention(nn.Module):
    def __init__(self, dim, attn_type="dot"):
        super(MLPAttention, self).__init__()
        self.dim = dim
        self.attn_type = attn_type

        self.linear_context = nn.Linear(dim, dim, bias=False)
        self.linear_query = nn.Linear(dim, dim, bias=True)
        self.v = nn.Linear(dim, 1, bias=False)

    def score(self, h_t, h_s):
        src_batch, src_len, src_dim = h_s.size()
        tgt_batch, tgt_len, tgt_dim = h_t.size()

        dim = self.dim
        wq = self.linear_query(h_t.view(-1, dim))
        wq = wq.view(tgt_batch, tgt_len, 1, dim)
        wq = wq.expand(tgt_batch, tgt_len, src_len, dim)

        uh = self.linear_context(h_s.contiguous().view(-1, dim))
        uh = uh.view(src_batch, 1, src_len, dim)
        uh = uh.expand(src_batch, tgt_len, src_len, dim)

        wquh = torch.tanh(wq + uh)

        return self.v(wquh.view(-1, dim)).view(tgt_batch, tgt_len, src_len)


class GeneralAttention(nn.Module):
    def __init__(self, dim, attn_type="dot"):
        super(GeneralAttention, self).__init__()
        self.dim = dim
        self.attn_type = attn_type
        self.linear_in = nn.Linear(dim, dim, bias=False)

    def score(self, h_t, h_s):
        src_batch, src_len, src_dim = h_s.size()
        tgt_batch, tgt_len, tgt_dim = h_t.size()

        h_t_ = h_t.view(tgt_batch * tgt_len, tgt_dim)
        h_t_ = self.linear_in(h_t_)
        h_t = h_t_.view(tgt_batch, tgt_len, tgt_dim)
        h_s_ = h_s.transpose(1, 2)
        return torch.bmm(h_t, h_s_)


class DotAttention(nn.Module):
    def __init__(self, dim, attn_type="dot"):
        super(DotAttention, self).__init__()
        self.dim = dim
        self.attn_type = attn_type

    def score(self, h_t, h_s):
        h_s_ = h_s.transpose(1, 2)
        return torch.bmm(h_t, h_s_)


class ConcatAttention(nn.Module):
    def __init__(self, hidden_dim):
        pass

    def forward(self):
        pass


class GlobalAttention(nn.Module):
    def __init__(self, dim, attn_type="dot"):
        super(GlobalAttention, self).__init__()

        self.dim = dim
        self.attn_type = attn_type

        if self.attn_type == "general":
            self.linear_in = nn.Linear(dim, dim, bias=False)
        elif self.attn_type == "mlp":
            self.linear_context = nn.Linear(dim, dim, bias=False)
            self.linear_query = nn.Linear(dim, dim, bias=True)
            self.v = nn.Linear(dim, 1, bias=False)

        # mlp wants it with bias
        out_bias = self.attn_type == "mlp"
        self.linear_out = nn.Linear(dim * 2, dim, bias=out_bias)

    def score(self, h_t, h_s):
        """
        Args:
          h_t (FloatTensor): sequence of queries ``(batch, tgt_len, dim)``
          h_s (FloatTensor): sequence of sources ``(batch, src_len, dim``

        Returns:
          FloatTensor: raw attention scores (unnormalized) for each src index
            ``(batch, tgt_len, src_len)``
        """

        # Check input sizes
        src_batch, src_len, src_dim = h_s.size()
        tgt_batch, tgt_len, tgt_dim = h_t.size()
        assert src_batch == tgt_batch
        assert src_dim == tgt_dim
        assert self.dim == src_dim

        if self.attn_type in ["general", "dot"]:
            if self.attn_type == "general":
                h_t_ = h_t.view(tgt_batch * tgt_len, tgt_dim)
                h_t_ = self.linear_in(h_t_)
                h_t = h_t_.view(tgt_batch, tgt_len, tgt_dim)
            h_s_ = h_s.transpose(1, 2)
            # (batch, t_len, d) x (batch, d, s_len) --> (batch, t_len, s_len)
            return torch.bmm(h_t, h_s_)
        else:  # self.attn_type == mlp
            dim = self.dim
            wq = self.linear_query(h_t.view(-1, dim))
            wq = wq.view(tgt_batch, tgt_len, 1, dim)
            wq = wq.expand(tgt_batch, tgt_len, src_len, dim)

            uh = self.linear_context(h_s.contiguous().view(-1, dim))
            uh = uh.view(src_batch, 1, src_len, dim)
            uh = uh.expand(src_batch, tgt_len, src_len, dim)

            # (batch, t_len, s_len, d)
            wquh = torch.tanh(wq + uh)

            return self.v(wquh.view(-1, dim)).view(tgt_batch, tgt_len, src_len)

    def forward(self, decoder_hidden, memory_bank, memory_mask=None):
        """

        Args:
          decoder_hidden (FloatTensor): query vectors ``(batch, tgt_len, dim)``
          memory_bank (FloatTensor): source vectors ``(batch, src_len, dim)``
          memory_lengths (LongTensor): the source context lengths ``(batch,)``

        Returns:
          (FloatTensor, FloatTensor):

          * Computed vector ``(tgt_len, batch, dim)``
          * Attention distribtutions for each query
            ``(tgt_len, batch, src_len)``
        """

        # one step input
        if decoder_hidden.dim() == 2:
            one_step = True
            decoder_hidden = decoder_hidden.unsqueeze(1)
        else:
            one_step = False

        batch, source_l, dim = memory_bank.size()
        batch_, target_l, dim_ = decoder_hidden.size()
        assert batch == batch_
        assert dim == dim_
        assert self.dim == dim

        # compute attention scores, as in Luong et al.
        align = self.score(decoder_hidden, memory_bank)

        if memory_mask is not None:
            memory_mask = memory_mask.unsqueeze(1)  # Make it broadcastable.
            align.masked_fill_(memory_mask == 0, -float('inf'))

        align_vectors = F.softmax(align.view(batch*target_l, source_l), -1)
        align_vectors = align_vectors.view(batch, target_l, source_l)

        # each context vector c_t is the weighted average
        # over all the source hidden states
        context_vector = torch.bmm(align_vectors, memory_bank)

        # concatenate
        concat_c = torch.cat(
            [context_vector, decoder_hidden], 2).view(batch*target_l, dim*2)
        attn_h = self.linear_out(concat_c).view(batch, target_l, dim)

        if self.attn_type in ["general", "dot"]:
            attn_h = torch.tanh(attn_h)

        if one_step:
            attn_h = attn_h.squeeze(1)
            align_vectors = align_vectors.squeeze(1)

            # Check output sizes
            batch_, dim_ = attn_h.size()
            assert batch == batch_
            assert dim == dim_
            batch_, source_l_ = align_vectors.size()
            assert batch == batch_
            assert source_l == source_l_

        else:
            attn_h = attn_h.transpose(0, 1).contiguous()
            align_vectors = align_vectors.transpose(0, 1).contiguous()
            # Check output sizes
            target_l_, batch_, dim_ = attn_h.size()
            assert target_l == target_l_
            assert batch == batch_
            assert dim == dim_
            target_l_, batch_, source_l_ = align_vectors.size()
            assert target_l == target_l_
            assert batch == batch_
            assert source_l == source_l_

        return attn_h, align_vectors
